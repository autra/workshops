###############################################################################
#
# How To Use this Makefile
#------------------------------------------------------------------------------
# Let's say you have a markdown source file named foo.md in the 'fr' directory
#
#  - `make fr/foo.pdf` will build a PDF from fr/foo.md
#  - `make fr/foo.epub` will build an EPUB from fr/foo.md
#  - `make all` will build all source files in all formats
#  - `make clean` will remove all build artifacts
#
# Pandoc or docker ?
#------------------------------------------------------------------------------
#  
#  - by default, we use pandoc to compile documents
#  - if pandoc is not installed, we use a docker image instead
#    see https://github.com/dalibo/pandocker/
#  - use `DOCKER=latest make all` to force make to use docker 
#
# Dalibo Themes or not ?
#-------------------------------------------------------------------------------
#
#   - dalibo themes are not open source but they're optionnal
#   - you can compile the docs without them
#   - use `LOCAL_DLB=/tmp/dalibo make all` to change the dalibo themes location
#
###############################################################################


###############################################################################
# Folders

SOURCES=en fr

PATHS := $(shell find $(SOURCES) -maxdepth 1 -mindepth 1 -type d)
PATHS := $(filter-out %/include %/medias, $(PATHS))
WORKSHOPS := $(notdir $(PATHS))

###############################################################################
# Functions

ECHO=$(info Compiling $^ into $@)
IN=`basename $^`
OUT=`basename $@`
DIR=`dirname $^`

###############################################################################
# Sources and default formats

# README files and other documentation markdown files are not compiled
EXCLUDE_FILES=.*\(LICENSE\|README\|QUICKSTART\|CONTRIBUTING\|SYNTAX\|INSTALL\|AUTHORS\)\.md
EXCLUDE_SRC=$(shell find $(SOURCES) -regex "$(EXCLUDE_FILES)" -type f)

# SRC is the list of all the source markdown files
SRC := $(filter-out $(EXCLUDE_SRC), $(shell find $(PATHS) -maxdepth 1 -type f -name '*.md'))

# See make help to know which are really supported
#Â Uncommented formats are generated by default
SRC_FORMATS = FILE.md
#SRC_FORMATS+= FILE.docx
#SRC_FORMATS+= FILE.epub
SRC_FORMATS+= FILE.handout.html
#SRC_FORMATS+= FILE.odt
#SRC_FORMATS+= FILE.tex
SRC_FORMATS+= FILE.pdf
#SRC_FORMATS+= FILE.beamer.pdf
SRC_FORMATS+= FILE.slides.html
#SRC_FORMATS+= FILE.slides.local.html
#SRC_FORMATS+= FILE.slides.s5.html

###############################################################################
# Pandoc
#

# LOCAL_DLB is a directory containing dalibo themes
# dalibo themes are not open source but they're optionnal
ifeq ($(LOCAL_DLB),)
    LOCAL_DLB=$(HOME)/.dalibo/themes/
endif

# Normally DLB == LOCAL_DLB, but this will change when we'll use docker
DLB=$(LOCAL_DLB)

# Parameters common to pandoc when called directly and through docker
PANDOC_PARAMS?=--filter pandoc-include

# By default we use the local pandoc (if installed)
PANDOC_BIN?=pandoc
PANDOC=$(PANDOC_BIN) $(PANDOC_PARAMS) --metadata=dlb:$(LOCAL_DLB)

# If pandoc is not installed, force docker use
ifeq (, $(shell which $(PANDOC_BIN) 2>/dev/null))
    DOCKER?=latest
    # do not forget to update .gitlab-ci.yml too
endif

# Even if pandoc is installed, we can use docker with `DOCKER=latest make`
ifneq ($(DOCKER),)
    DOCKER_DLB=/root/.dalibo/themes

    # --privileged is necessary for people using SELinux
    # --rm removes the container after execution
    PANDOC=docker run --privileged --rm -it \
      --volume `pwd`:/pandoc --volume $(LOCAL_DLB):$(DOCKER_DLB) \
      dalibo/pandocker:$(DOCKER) --metadata=dlb:$(DOCKER_DLB) $(PANDOC_PARAMS)
    DLB=$(DOCKER_DLB)
endif

##########################
# Pandoc Compilation Flags

ifeq ("$(wildcard $(LOCAL_DLB))","")
    # dalibo themes are not available, use default compilation flags
    BEAMER_FLAGS= -st beamer 
    DOCX_FLAGS=-t doc --toc
    EPUB_FLAGS=-t epub --toc
    HANDOUT_HTML_FLAGS=-t html5 --self-contained --standalone --toc --toc-depth=2
    HTML_FLAGS=-t html5 --self-contained --standalone --toc --toc-depth=2
    MARKDOWN_FLAGS=-t markdown
    ODT_FLAGS=-t odt --toc
    PDF_FLAGS=--toc --pdf-engine=xelatex
    REVEAL_FLAGS=-t revealjs --standalone -V revealjs-url:http://lab.hakim.se/reveal-js/
    S5_FLAGS=-t s5 --self-contained --standalone
    TEX_FLAGS= -st beamer 
else
# Dalibo's compilation flags
    BEAMER_FLAGS= -st beamer -V theme=Dalibo
    DOCX_FLAGS=--reference-doc=$(DLB)/doc/template_conference.dokuwiki.doc
    EPUB_FLAGS=
    HANDOUT_HTML_FLAGS=-t html5 --self-contained --standalone --toc --toc-depth=2 \
      --template=$(DLB)/html/uikit/dalibo.html 
    HTML_FLAGS=-t html5 --self-contained --standalone --toc --toc-depth=2 \
      --template=$(DLB)/html/uikit/dalibo.html
    MARKDOWN_FLAGS=-t markdown
    ODT_FLAGS=--reference-doc=$(DLB)/odt/template_conference.dokuwiki.odt
    # PDF_FLAGS=--pdf-engine=xelatex --toc --filter pandoc-latex-admonition \
    #   --template=$(DLB)/tex/book1/template.tex
    PDF_FLAGS=--pdf-engine=xelatex --toc -N --from=markdown-smart \
      --filter pandoc-latex-environment --filter pandoc-latex-admonition \
      --template=$(DLB)/tex/book1/template.tex
    REVEAL_FLAGS=-t revealjs --self-contained --standalone \
       -V revealjs-url="$(DLB)/reveal.js/" \
       --template="$(DLB)/reveal.js/pandoc/templates/dalibo.revealjs"
    REVEAL_LOCAL_FLAGS=-t revealjs --standalone \
       -V revealjs-url="$(DLB)/reveal.js/" \
       --template="$(DLB)/reveal.js/pandoc/templates/dalibo.revealjs"
    S5_FLAGS=-t s5 --self-contained --standalone -V s5-url:$(DLB)/s5/
    TEX_FLAGS= -st beamer -V theme=Dalibo
endif

###############################################################################
# HTML handout

HANDOUT_HTML_OBJS=$(SRC:.md=.handout.html)
OBJS += $(HANDOUT_HTML_OBJS)

%.handout.html: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(HANDOUT_HTML_FLAGS) $(IN) -o $(OUT)

###############################################################################
# PDF and Peecho handouts

PDF_OBJS=$(SRC:.md=.nocover.pdf)
OBJS += $(PDF_OBJS)

.INTERMEDIATE: $(PDF_OBJS)

%.nocover.pdf: %.md
	$(ECHO)	
	cd $(DIR) && $(PANDOC) $(PDF_FLAGS) $(IN) -o $(OUT)

PEECHO_OBJS=$(SRC:.md=.pdf)
OBJS += $(PEECHO_OBJS)

%.peecho.pdf: %.nocover.pdf
	$(ECHO)
	cd $(DIR) && \
	$(LOCAL_DLB)/tex/book1/postprod.peecho.py \
	  -b $(LOCAL_DLB)/tex/book1/backcover.pdf \
	  -n $(LOCAL_DLB)/tex/book1/note.pdf \
	  -p $(LOCAL_DLB)/tex/book1/publications.pdf $(IN) -o $(OUT) 

%.pdf: %.peecho.pdf
	$(ECHO)
	cd $(DIR) && mv $(IN) $(OUT)

###############################################################################
# Reveal Slides

REVEAL_OBJS=$(SRC:.md=.slides.html)
OBJS += $(REVEAL_OBJS)

%.slides.html: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(REVEAL_FLAGS) $(IN) -o $(OUT)

REVEAL_LOCAL_OBJS=$(SRC:.md=.slides.local.html)
OBJS += $(REVEAL_LOCAL_OBJS)

%.slides.local.html: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(REVEAL_LOCAL_FLAGS) $(IN) -o $(OUT)

###############################################################################
# Epub handout

EPUB_OBJS=$(SRC:.md=.epub)
OBJS += $(EPUB_OBJS)

%.epub: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(EPUB_FLAGS) $(IN) -o  $(OUT)

###############################################################################
# DOCX and ODT handouts

DOCX_OBJS=$(SRC:.md=.docx)
OBJS += $(DOCX_OBJS)

%.docx: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(DOCX_FLAGS) $(IN) -o  $(OUT)

ODT_OBJS=$(SRC:.md=.odt)
OBJS += $(ODT_OBJS)

%.odt: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(ODT_FLAGS) $(IN) -o  $(OUT)

###############################################################################
# Others slides

BEAMER_OBJS=$(SRC:.md=.beamer.pdf)
OBJS += $(BEAMER_OBJS)

%.beamer.pdf: %.md
	$(ECHO)
	TEXMFHOME=$(DLB)/beamer	cd $(DIR) && $(PANDOC) $(BEAMER_FLAGS) $(IN) -o $(OUT)

S5_OJBS=$(SRC:.md=.slides.s5.html)
OBJS += $(S5_OJBS)

%.slides.s5.html: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(S5_FLAGS) $(IN) -o $(OUT)

###############################################################################
# Others formats rules

JSON_OBJS=$(SRC:.md=.json)
OBJS += $(JSON_OBJS)

%.json: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(JSON_FLAGS) $(IN) -o $(OUT)

TEX_OBJS=$(SRC:.md=.tex)
OBJS += $(TEX_OBJS)

%.tex: %.md
	$(ECHO)
	cd $(DIR) && $(PANDOC) $(TEX_FLAGS) $(IN) -o $(OUT)

%.all:  %.html %.tex %.beamer.pdf %.pdf %.odt %.docx %.epub
	$(ECHO)

###############################################################################
# Global Targets

all: reveal handout_html pdf epub

# Dynamic target definition
define workshop_target =
  $(lastword $(subst /, ,$(dir $(1)))): $(subst FILE, $(basename $(1)),$(SRC_FORMATS))
endef

# Invoke markdown rules for each workshop directory
$(foreach src, $(SRC), $(eval $(call workshop_target,$(src))))

# Supported formats
beamer: $(BEAMER_OBJS)
docx: $(DOCX_OBJS)
epub: $(EPUB_OBJS)
handout_html: $(HANDOUT_HTML_OBJS)
json: $(JSON_OBJS)
nocover_pdf: $(PDF_OBJS)
odt: $(ODT_OBJS)
pdf: $(PEECHO_OBJS)
reveal: $(REVEAL_OBJS)
tex: $(TEX_OBJS)

clean:
	rm -f $(OBJS)

test:
	@echo $(OBJS) | tr " " "\n"

install:
	ln -s $(HOME)/.dalibo/themes/ 

uninstall:
	rm themes
